{"version":3,"file":"component---src-components-blog-post-layout-js-content-file-path-home-runner-work-aimlessanalysis-aimlessanalysis-content-life-do-it-wrong-the-first-time-mdx-6778f4f2f4bc02fc17bd.js","mappings":"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","sources":["webpack://aimless-analysis/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://aimless-analysis/./node_modules/@mdx-js/react/lib/index.js","webpack://aimless-analysis/./content/life/do_it_wrong_the_first_time.mdx","webpack://aimless-analysis/./src/components/blog-post-layout.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _defineProperty from \"/home/runner/work/aimlessanalysis/aimlessanalysis/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react';\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport var MDXContext = React.createContext({});\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent;\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    var allComponents = useMDXComponents(props.components);\n    return React.createElement(Component, _objectSpread(_objectSpread({}, props), {}, {\n      allComponents: allComponents\n    }));\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext);\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(function () {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents);\n    }\n    return _objectSpread(_objectSpread({}, contextComponents), components);\n  }, [contextComponents, components]);\n}\n\n/** @type {Components} */\nvar emptyObject = {};\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider(_ref) {\n  var components = _ref.components,\n    children = _ref.children,\n    disableParentContext = _ref.disableParentContext;\n  var allComponents = useMDXComponents(components);\n  if (disableParentContext) {\n    allComponents = components || emptyObject;\n  }\n  return React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, children);\n}","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I think a lot more people have gained the mindset of iteration and that you'll never do something perfectly the first time (or you'll take too long to do it perfectly that it wont matter anymore) and I think most people aim for 70-80% quality. This puts you under the last 5-10% takes 50% of the time rule but generally puts thing in a pretty well completed state. You then either say that is good enough or you iterate a few more times with the new information of having completed something to get to that 100%. The  commonly thought of alternative is the harder set of requirements and a final deliverable at the end.\"), \"\\n\", React.createElement(_components.p, null, \"I very recently had to pick up AWS, Terraform, consul, vault and some other technologies for my team's transition to the cloud. It all seems fairly straightforward, toss a VPC up, put your stuff in, expose it internally on the VPC, call it a day. Do it all with terraform so it is defined as code and that'll do you one better right. Who doesn't want to just run terraform apply and get their service fully running? This was my first time doing all this, but I had the opinions of others more familiar with AWS telling me it was possible and our setup was going to be terraform so that should work too. I validated that it looked like it would work (what a local dev setup would be, how the service would interact with others, etc) and then set out to write that 70% complete service that fit in our 70% completed architecture.\"), \"\\n\", React.createElement(_components.p, null, \"Really it just didn't end up being that easy. I really didn't know what I didn't know and hit problem after problem in our multi account AWS setup with fully private subnets (which I was supposed to put my service in) and standardized terraform layout which I was supposed to include my work in. After gaining more experience with terraform I found that this was really a poor way to deploy a whole service (please keep your terraform to just your infrastructure) without the ability to do some ordering (like terragrunt) on different terraform invocations. Being in a fully private subnet meant utilizing AWS through VPC private endpoints and operating in what felt like a non-cloud way.\"), \"\\n\", React.createElement(_components.p, null, \"I wish I could have taken a third approach, one that I find is very hard to take, but could have been very valuable in this situation. I would have started at nothing and just built something that worked. At around 40% of the way on this service, I learned so much and hard discovered so many unknowns that I would have taken a new approach all together. Being locked into the company's design at 70% though, I couldn't write a service that didn't hit the same design complexity as everyone else. The just building approach could've really helped me learn about the implementation complexities coming with the design and led more of the push back on certain choices that were going to end up killing velocity. You're going to do it wrong the first time going this way, this is obviously the value of experienced engineers in being able to predict the implementation complexities that come with designs versus just providing designs that meet goals (another valuable and humbling lesson learned).\"), \"\\n\", React.createElement(_components.p, null, \"Obviously this is not always going to be the right approach (and for many not up to them). If you have enough experience across all developers such that all designs can be vetted for the implementation difficulties and there is enough familiarity on all technologies, then flex that experience and build something nearly there the first time. You're going to run into far fewer unknowns with the previous experience and get a lot more pain from having to rewrite the things that were just built from natural progression. You also might not have the time to take this approach. Even if you struggle to hit 70%, it is going to end up faster than potential architecture rewrites to hit important features later down the line. I think the difference in time here is not as big as one would think, especially if you do already have natural team boundaries and prevent cross contamination there. With the boundaries you prevent impossible to break apart monoliths (at the cost of maybe doing something twice) and can break those boundaries naturally later down the line.\"), \"\\n\", React.createElement(_components.p, null, \"I find this approach tough to take because I naturally want to build a strong architecture from the beginning and don't want to accept building something with known flaws. It is hard to just build something when you keep finding ways you think could be better and want to make sure you have the full picture first. I had also never had anyone point this approach out as something valid to do outside of hobbies (although the argument is normally so you can actually make use of your limited time).\"), \"\\n\", React.createElement(_components.p, null, \"Not really sure how to end this one out. It is going to be a while before I can attempt this build first and doing it wrong approach professionally, but I hope my thoughts here can remind me and help make that decision next time.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/aimlessanalysis/aimlessanalysis/content/life/do_it_wrong_the_first_time.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport Layout from \"./layout\";\nimport Seo from \"./seo\";\nconst shortcodes = {\n  Link\n};\nfunction PageTemplate({data: {mdx}, children}) {\n  return React.createElement(Layout, null, React.createElement(Seo, {\n    title: mdx.frontmatter.title\n  }), React.createElement(\"div\", {\n    className: \"post\"\n  }, React.createElement(\"h1\", null, mdx.frontmatter.title), React.createElement(\"p\", null, mdx.frontmatter.author, \" - \", mdx.frontmatter.date), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PageTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query PostTemplate($id: String!) {\n    mdx(id: { eq: $id }) {\n      id\n      frontmatter {\n        title\n        author\n        date(formatString: \"MMMM Do, YYYY\")\n      }\n    }\n  }\n`;\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","MDXContext","useMDXComponents","components","contextComponents","emptyObject","MDXProvider","_ref","children","disableParentContext","allComponents","Provider","_createMdxContent","props","_components","assign","p","_provideComponents","React","MDXLayout","wrapper","shortcodes","Link","PageTemplate","mdx","data","Layout","Seo","title","frontmatter","className","author","date","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}